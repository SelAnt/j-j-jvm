/* 
 * Copyright 2015 Igor Maznitsa (http://www.igormaznitsa.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.igormaznitsa.jjjvm.stubgen.jjjvmwrapper;

import com.igormaznitsa.jjjvm.stubgen.jjjvmwrapper.model.ClassItem;
import com.igormaznitsa.jjjvm.stubgen.jjjvmwrapper.model.Storage;
import com.igormaznitsa.jjjvm.stubgen.jjjvmwrapper.model.StorageItem;
import com.igormaznitsa.jjjvm.stubgen.utils.Utils;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.PrintStream;
import javax.swing.JOptionPane;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.TreePath;

public class MainForm extends javax.swing.JFrame implements WindowListener, TreeSelectionListener {

  public static final long serialVersionUID = 982349823l;

  protected ClassItemProperties classInfoPanel;
  protected Storage currentStorage;
  protected File lastAddedFile;
  protected File lastSavedStub;
  protected static final FileFilter FILTER_CLASS = new FileFilter() {

    @Override
    public boolean accept(final File file) {
      if (file == null) {
        return false;
      }
      if (file.isDirectory()) {
        return true;
      }
      return file.getName().toLowerCase().endsWith(".class");
    }

    @Override
    public String getDescription() {
      return "Java class file (*.class)";
    }
  };

  protected static final FileFilter FILTER_JAVA = new FileFilter() {

    @Override
    public boolean accept(final File file) {
      if (file == null) {
        return false;
      }
      if (file.isDirectory()) {
        return true;
      }
      return file.getName().toLowerCase().endsWith(".java");
    }

    @Override
    public String getDescription() {
      return "Java source file (*.java)";
    }
  };

  protected static final FileFilter FILTER_JAR = new FileFilter() {
    @Override
    public boolean accept(final File file) {
      if (file == null) {
        return false;
      }
      if (file.isDirectory()) {
        return true;
      }

      String s_fileName = file.getName().toLowerCase();

      return s_fileName.endsWith(".zip") || s_fileName.endsWith(".jar");
    }

    @Override
    public String getDescription() {
      return "JAR or ZIP archive (*.jar, *.zip)";
    }
  };

  /**
   * Creates new form MainForm
   */
  public MainForm() {
    try {
      initComponents();
      setTitle(main.APPLICATION + ' ' + main.VERSION);

      currentStorage = new Storage("Default");

      treeClasses.setModel(currentStorage);
      treeClasses.setCellRenderer(new TRender());
      treeClasses.addTreeSelectionListener(this);

      classInfoPanel = new ClassItemProperties();

      addWindowListener(this);

      Utils.toScreenCenter(this);

      setIconImage(Utils.loadImage("images/appico.png"));

      setVisible(true);
    }
    catch (Throwable _thr) {
      _thr.printStackTrace();
      dispose();
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    splitPane = new javax.swing.JSplitPane();
    p_LeftPanel = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    treeClasses = new javax.swing.JTree();
    toolBarTreeButtons = new javax.swing.JToolBar();
    buttonAdd = new javax.swing.JButton();
    buttonRemove = new javax.swing.JButton();
    buttonRemoveAll = new javax.swing.JButton();
    panelRight = new javax.swing.JScrollPane();
    panelEmpty = new javax.swing.JPanel();
    panelState = new javax.swing.JPanel();
    jMenuBar1 = new javax.swing.JMenuBar();
    menuFile = new javax.swing.JMenu();
    menuFileGenerateStub = new javax.swing.JMenuItem();
    jSeparator1 = new javax.swing.JSeparator();
    menuFileExit = new javax.swing.JMenuItem();
    menuHelp = new javax.swing.JMenu();
    menuHelpHelp = new javax.swing.JMenuItem();
    menuHelpAbout = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    splitPane.setDividerLocation(200);

    p_LeftPanel.setLayout(new java.awt.BorderLayout());

    treeClasses.setRootVisible(false);
    jScrollPane1.setViewportView(treeClasses);

    p_LeftPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

    toolBarTreeButtons.setRollover(true);

    buttonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon_add.gif"))); // NOI18N
    buttonAdd.setToolTipText("Add new item int the tree");
    buttonAdd.setFocusable(false);
    buttonAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    buttonAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    buttonAdd.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonAddActionPerformed(evt);
      }
    });
    toolBarTreeButtons.add(buttonAdd);

    buttonRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon_remove.gif"))); // NOI18N
    buttonRemove.setToolTipText("Remove selected items from the tree");
    buttonRemove.setFocusable(false);
    buttonRemove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    buttonRemove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    buttonRemove.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonRemoveActionPerformed(evt);
      }
    });
    toolBarTreeButtons.add(buttonRemove);

    buttonRemoveAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon_removeall.gif"))); // NOI18N
    buttonRemoveAll.setToolTipText("Clear the tree");
    buttonRemoveAll.setFocusable(false);
    buttonRemoveAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    buttonRemoveAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    buttonRemoveAll.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonRemoveAllActionPerformed(evt);
      }
    });
    toolBarTreeButtons.add(buttonRemoveAll);

    p_LeftPanel.add(toolBarTreeButtons, java.awt.BorderLayout.NORTH);

    splitPane.setLeftComponent(p_LeftPanel);

    panelEmpty.setPreferredSize(new java.awt.Dimension(500, 400));

    javax.swing.GroupLayout panelEmptyLayout = new javax.swing.GroupLayout(panelEmpty);
    panelEmpty.setLayout(panelEmptyLayout);
    panelEmptyLayout.setHorizontalGroup(
      panelEmptyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 542, Short.MAX_VALUE)
    );
    panelEmptyLayout.setVerticalGroup(
      panelEmptyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 458, Short.MAX_VALUE)
    );

    panelRight.setViewportView(panelEmpty);

    splitPane.setRightComponent(panelRight);

    getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);

    panelState.setPreferredSize(new java.awt.Dimension(759, 20));

    javax.swing.GroupLayout panelStateLayout = new javax.swing.GroupLayout(panelState);
    panelState.setLayout(panelStateLayout);
    panelStateLayout.setHorizontalGroup(
      panelStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 759, Short.MAX_VALUE)
    );
    panelStateLayout.setVerticalGroup(
      panelStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 20, Short.MAX_VALUE)
    );

    getContentPane().add(panelState, java.awt.BorderLayout.SOUTH);

    menuFile.setText("File");

    menuFileGenerateStub.setText("Generate stub");
    menuFileGenerateStub.setToolTipText("Generate stub as java class source");
    menuFileGenerateStub.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menuFileGenerateStubActionPerformed(evt);
      }
    });
    menuFile.add(menuFileGenerateStub);
    menuFile.add(jSeparator1);

    menuFileExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
    menuFileExit.setText("Exit");
    menuFileExit.setToolTipText("Close the application");
    menuFileExit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menuFileExitActionPerformed(evt);
      }
    });
    menuFile.add(menuFileExit);

    jMenuBar1.add(menuFile);

    menuHelp.setText("Help");

    menuHelpHelp.setText("Help");
    menuHelpHelp.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menuHelpHelpActionPerformed(evt);
      }
    });
    menuHelp.add(menuHelpHelp);

    menuHelpAbout.setText("About");
    menuHelpAbout.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menuHelpAboutActionPerformed(evt);
      }
    });
    menuHelp.add(menuHelpAbout);

    jMenuBar1.add(menuHelp);

    setJMenuBar(jMenuBar1);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonAddActionPerformed
    {//GEN-HEADEREND:event_buttonAddActionPerformed
      final FileFilter[] selectedFilters = new FileFilter[1];

      final File file = Utils.selectFileForOpen(this, new FileFilter[]{
        FILTER_JAR, FILTER_CLASS
      }, "Add item into the tree", selectedFilters, lastAddedFile);

      try {
        if (file != null) {
          this.lastAddedFile = file;

          if (selectedFilters[0].equals(FILTER_CLASS)) {
            // class
            this.currentStorage.addClassFromFile(file);
          }
          else {
            // jar or zip
            this.currentStorage.addArchive(file);
          }
        }
      }
      catch (Throwable thr) {
        thr.printStackTrace();
        JOptionPane.showMessageDialog(this, "Can't load or parse " + thr, "Error during operation", JOptionPane.ERROR_MESSAGE);
      }
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonRemoveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonRemoveActionPerformed
    {//GEN-HEADEREND:event_buttonRemoveActionPerformed
      final TreePath[] paths = treeClasses.getSelectionPaths();

      if (paths == null) {
        return;
      }

      if (paths.length > 0) {
        if (JOptionPane.showConfirmDialog(this, "Do you really want to remove selected items?", "Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
          return;
        }

        this.treeClasses.setSelectionPath(null);

        for (int i = 0; i < paths.length; i++) {
          this.currentStorage.removeItem((StorageItem) paths[i].getLastPathComponent());
        }
      }
    }//GEN-LAST:event_buttonRemoveActionPerformed

    private void buttonRemoveAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonRemoveAllActionPerformed
    {//GEN-HEADEREND:event_buttonRemoveAllActionPerformed
      if (JOptionPane.showConfirmDialog(this, "Do you really want to remove all items?", "Confirmation", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
        return;
      }

      this.treeClasses.setSelectionPath(null);
      this.currentStorage.removeAll();
    }//GEN-LAST:event_buttonRemoveAllActionPerformed

    private void menuFileExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuFileExitActionPerformed
    {//GEN-HEADEREND:event_menuFileExitActionPerformed
      windowClosing(null);
    }//GEN-LAST:event_menuFileExitActionPerformed

    private void menuFileGenerateStubActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuFileGenerateStubActionPerformed
    {//GEN-HEADEREND:event_menuFileGenerateStubActionPerformed
      final ClassItem[] classItems = currentStorage.getAllClassItems();
      if (classItems.length == 0) {
        JOptionPane.showMessageDialog(this, "There is not any class to make stub", "Can't make stub", JOptionPane.WARNING_MESSAGE);
      }
      else {
        final GenerateStubDialog stubGeneratingDialog = new GenerateStubDialog(this);
        String result = stubGeneratingDialog.process(classItems);
        if (result == null) {
          result = stubGeneratingDialog.getError();
          if (result != null) {
            JOptionPane.showMessageDialog(this, "Error during operation: " + result, "Error", JOptionPane.ERROR_MESSAGE);
          }
          else {
            System.out.println("Operation was canceled");
          }
        }
        else {
          File fileToSave = Utils.selectFileForSave(this, FILTER_JAVA, "Save generated file", lastSavedStub);

          if (fileToSave != null) {
            this.lastSavedStub = fileToSave;

            PrintStream printStream = null;
            try {
              String fileName = fileToSave.getName();
              String className = null;
              int lastDotIndex = fileName.lastIndexOf('.');
              if (lastDotIndex < 0) {
                className = fileName;
                fileName += ".java";
                fileToSave = new File(fileToSave.getParentFile(), fileName);
              }
              else {
                className = fileName.substring(0, lastDotIndex);
              }

              result = result.replace((CharSequence) GenerateStubDialog.MACROS_CLASSNAME, (CharSequence) className);

              printStream = new PrintStream(fileToSave);
              printStream.print(result);
            }
            catch (Throwable thr) {
              thr.printStackTrace();
              JOptionPane.showMessageDialog(this, "Can't save file : " + thr.getMessage(), "Can't save", JOptionPane.ERROR_MESSAGE);
            }
            finally {
              if (printStream != null) {
                try {
                  printStream.close();
                }
                catch (Throwable t) {
                }
              }
            }
          }
        }
      }
    }//GEN-LAST:event_menuFileGenerateStubActionPerformed

    private void menuHelpHelpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuHelpHelpActionPerformed
    {//GEN-HEADEREND:event_menuHelpHelpActionPerformed
      new HelpDialog(this);
    }//GEN-LAST:event_menuHelpHelpActionPerformed

    private void menuHelpAboutActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuHelpAboutActionPerformed
    {//GEN-HEADEREND:event_menuHelpAboutActionPerformed
      new AboutDialog(this);

}//GEN-LAST:event_menuHelpAboutActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton buttonAdd;
  private javax.swing.JButton buttonRemove;
  private javax.swing.JButton buttonRemoveAll;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JMenu menuFile;
  private javax.swing.JMenuItem menuFileExit;
  private javax.swing.JMenuItem menuFileGenerateStub;
  private javax.swing.JMenu menuHelp;
  private javax.swing.JMenuItem menuHelpAbout;
  private javax.swing.JMenuItem menuHelpHelp;
  private javax.swing.JPanel p_LeftPanel;
  private javax.swing.JPanel panelEmpty;
  private javax.swing.JScrollPane panelRight;
  private javax.swing.JPanel panelState;
  private javax.swing.JSplitPane splitPane;
  private javax.swing.JToolBar toolBarTreeButtons;
  private javax.swing.JTree treeClasses;
  // End of variables declaration//GEN-END:variables

  @Override
  public void windowOpened(WindowEvent e) {
  }

  @Override
  public void windowClosing(WindowEvent e) {
    dispose();
  }

  @Override
  public void windowClosed(WindowEvent e) {
  }

  @Override
  public void windowIconified(WindowEvent e) {
  }

  @Override
  public void windowDeiconified(WindowEvent e) {
  }

  @Override
  public void windowActivated(WindowEvent e) {
  }

  @Override
  public void windowDeactivated(WindowEvent e) {
  }

  @Override
  public void valueChanged(final TreeSelectionEvent e) {
    final TreePath[] paths = this.treeClasses.getSelectionPaths();
    if (paths == null) {
      return;
    }
    final Object[] objects = new Object[paths.length];
    for (int i = 0; i < paths.length; i++) {
      objects[i] = paths[i].getLastPathComponent();
    }

    selectObjects(objects);
  }

  public synchronized void selectObjects(final Object[] objects) {
    if (objects == null || objects.length == 0 || objects.length > 1) {
      this.panelRight.setViewportView(this.panelEmpty);
    }
    else {
      if (objects[0] instanceof ClassItem) {
        this.classInfoPanel.setModel((ClassItem) objects[0]);
        this.panelRight.setViewportView(this.classInfoPanel);
      }
      else {
        this.panelRight.setViewportView(this.panelEmpty);
      }
    }

    this.panelRight.doLayout();
    this.panelRight.repaint();
  }
}
