import com.igormaznitsa.jjjvm.*;

/**
 * The source was automatically generated by stub generator of J-J-JVM framework.
 *
 * Date: ${dateTime}
 * Generator: ${generatorId}
 *
 */
public class ${className} extends com.igormaznitsa.jjjvm.impl.JSEProviderImpl {
    public ${className}()
    {
    }

    public final Object invoke(MJVMClass _class,Object _object, String _method, Object[] _arguments)
    {
      if (_object == null)
      {
         // static methods
         ${staticMethods}

            throw new Error("Unprocessed static method");
      }
      else
      {
         // non-static methods
%%DYNAMIC_METHODS%%

            throw new Error("Unprocessed method");
      }
    }

    /**
     * Make a new instance of a class
     * @param _source a MJVMClass object which has called the method, must not be null
     * @param _class a class name in the SUN class name format, must not be null
     * @return new instance of the class as Object, must not be null
     */
    public final Object newInstance(MJVMClass _source,String _class)
    {
        try
        {
            String s_class = null;

%%NEW_INSTANCES%%
           
            return Class.forName(s_class).newInstance();
        }
        catch(Throwable _thr)
        {
            _thr.printStackTrace();
            throw new Error("Can't create new object instance");
        }
    }

    /**
     * Create an object array
     * @param _source a MJVMClass object which has called the method, must not be null
     * @param _class a class name in the SUN class name format, must not be null. We have to make an array supports the class
     * @param _length the length of the array, must not be negative
     * @return new one-dimension array for the length and the class
     */
    public final Object [] newObjectArray(MJVMClass _source,String _class,int _length)
    {
        throw new Error("New object array is not implemented");
    }

    /**
     * Create a multidimension array
     * @param _source a MJVMClass object which has called the method, must not be null
     * @param _class a class name in the SUN class name format, must not be null. We have to make an array supports the class
     * @param _dimensions an array contains a length for every dimension of new array, must not be null
     * @return new multidimension array for the class
     */
    public final Object newMultidimensionObjectArray(MJVMClass _source,String _class,int [] _dimensions)
    {
        throw new Error("New multidimension object array is not implemented");
    }

    /**
     * Get a value from an object field
     * @param _class  a MJVMClass object which has called the method, must not be null
     * @param _object an object contains the field
     * @param _fieldidentifier the UID for the field in the format <SUN_class_name>.<method_name>.<method_signature>, must not be null
     * @return an object from the field or null
     */
    public final Object getField(MJVMClass _class,Object _object, String _fieldidentifier)
    {
%%DYNAMIC_FIELDS%%

        throw new Error("Unprocessed field");
    }


    /**
     * Set a value to a field
     * @param _class a MJVMClass object which has called the method, must not be null
     * @param _object an object contains the field
     * @param _fieldidentifier the UID for the field in the format <SUN_class_name>.<method_name>.<method_signature>, must not be null
     * @param _value the value to be placed in the field, can be null
     */
    public final void setField(MJVMClass _class,Object _object, String _fieldidentifier, Object _value)
    {
%%DYNAMIC_FIELDS%%

        throw new Error("Unprocessed field");
    }

    /**
     * Get a value from a static field
     * @param _class a MJVMClass object which has called the method, must not be null
     * @param _fieldidentifier  the UID for the field in the format <SUN_class_name>.<method_name>.<method_signature>, must not be null
     * @return the field value as an Object or null
     */
    public final Object getStatic(MJVMClass _class,String _fieldidentifier)
    {
%%STATIC_FIELDS%%

        throw new Error("Unprocessed static field");
    }

    /**
     * Set a value to a static field
     * @param _class  a MJVMClass object which has called the method, must not be null
     * @param _fieldidentifier  the UID for the field in the format <SUN_class_name>.<method_name>.<method_signature>, must not be null
     * @param _value the value to be placed in the field, can be null
     */
    public final void setStatic(MJVMClass _class,String _fieldidentifier, Object _value)
    {
%%STATIC_FIELDS%%

        throw new Error("Unprocessed static field");
    }
}
