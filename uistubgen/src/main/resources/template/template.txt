
import com.igormaznitsa.jjjvm.model.*;

/**
 * The Class is automatically generated.
 *
 * Date: ${dateTime}
 * Generator: ${generator}
 *
 */
public class ${className} extends com.igormaznitsa.jjjvm.impl.jse.JSEProviderImpl {

  public ${className} () {
  }

  public final Object invoke(JJJVMClass klazz, Object obj, String methodId, Object[] args) {
    if (obj == null) {
      // static methods section
      ${staticMethods}

      throw new Error("Non-Processed static method : "+methodId);
    } else {
      // non-static methods section

      throw new Error("Non-Processed non-static method : "+methodId);
    }
  }

  /**
   * Make a new instance of a class
   *
   * @param klazz caller, must not be null
   * @param classQualifiedName qualified class name, must not be null
   * @return new instance of the class as Object, must not be null
   */
  public Object newInstance(JJJVMClass klazz, String classQualifiedName) {
    try {
      ${newInstances}
      return Class.forName(classQualifiedName.replace('/', '.')).newInstance();
    }
    catch (Throwable ex) {
      throw new Error("Can't make instance : "+classQualifiedName,ex);
    }
  }

  /**
   * Create object array
   *
   * @param klazz caller, must not be null
   * @param classQualifiedName qualified class name, must not be null.
   * @param length the length of new array, must not be negative
   * @return one-dimension array
   */
  public final Object[] newObjectArray(JJJVMClass klazz, String classQualifiedName, int length) {
    ${newObjectArray}
    throw new Error("Can't make array : "+classQualifiedName);
  }

  /**
   * Create multidimension array
   *
   * @param klazz caller, must not be null
   * @param classQualifiedName qualified class name, must not be null.
   * @param dimensions array contains length per every dimension of new array, must not be null
   * @return new multi-dimension array
   */
  public final Object newMultidimensionObjectArray(JJJVMClass klazz, String classQualifiedName, int[] dimensions) {
    ${newMultidimensionObjectArray}
    throw new Error("Can't make multi-dimension object array : "+classQualifiedName);
  }

  /**
   * Get value from object field
   *
   * @param klazz caller, must not be null
   * @param object owner of the field
   * @param fieldId the UID for the field in the format : <classQualifiedName>.<methodName>.<methodSignature>, must not be null
   * @return object value of the field or null
   */
  public final Object getField(JJJVMClass klazz, Object object, String fieldId) {
    ${nonStaticFields}
    throw new Error("Non-processed field : "+fieldId);
  }

  /**
   * Set value to object field
   *
   * @param klazz caller, must not be null
   * @param object an object contains the field
   * @param fieldId the UID for the field in the format : <classQualifiedName>.<methodName>.<methodSignature>, must not be null
   * @param value value to be placed in the field, can be null
   */
  public final void setField(JJJVMClass klazz, Object object, String fieldId, Object value) {
    ${nonStaticFields}
    throw new Error("Non-processed field : "+fieldId);
  }

  /**
   * Get value from static field
   *
   * @param klazz caller, must not be null
   * @param fieldId field id in format <qualifiedClassName>.<methodName>.<methodSignature>, must not be null
   * @return field value as object or null
   */
  public final Object getStatic(JJJVMClass klazz, String fieldId) {
    ${staticFields}
    throw new Error("Non-processed static field : "+fieldId);
  }

  /**
   * Set value to static field
   *
   * @param klazz class, must not be null
   * @param fieldId the UID for the field in the format : <qualifiedClassName>.<methodName>.<methodSignature>, must not be null
   * @param value value to be placed in field, can be null
   */
  public final void setStatic(JJJVMClass klazz, String fieldId, Object value) {
    ${staticFields}
    throw new Error("Non-processed static field : " + fieldId);
  }
}
